static auto x = [](){
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return nullptr;
}();
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int deepestLeavesSum(TreeNode* root) {
        int sum=0;
        queue<TreeNode*> q;
        if(root == NULL)
            return 0;
        q.push(root);
        TreeNode *tem;
        int count = 1, count1;
        while(q.size() != 0)
        {
            count1 = 0;
            sum = 0;
            while(count--)
            {
                tem = q.front();
                q.pop();
                if(tem->left)
                {
                    q.push(tem->left);
                    count1++;
                }
                if(tem->right)
                {
                    q.push(tem->right);
                    count1++;
                }
                sum += tem->val;
            }
            // if(count1 != 0)
            count = count1;
        }
        return sum;
    }
};
