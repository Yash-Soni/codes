bool ispossible(long int num, int painter, vector<int> &C)
{
    long int sum =0;
    int p = 1;
    for(int i=0; i<C.size(); i++)
    {
        sum += C[i];
        if(sum > num)
        {   
            sum = 0;
            i--;
            if(p == painter)
                return false;
            p++;
        }
    }
    return true;
}

int Solution::paint(int A, int B, vector<int> &C) {
    int n = C.size();
    if(A >= n)
    {
        int num = *max_element(C.begin(), C.end());
        return B*num;
    }
    // sort(C.begin(), C.end());
    long int start, end=0,mid,ans;
    start = *max_element(C.begin(), C.end());
    // start = start;
    for(int i=0; i<n; i++)
        end += C[i];
    // end = end;

    while(start <= end)
    {
        mid = (start + end)/2;
        // cout<<"\nstart "<<start<<" end "<<end<<" mid "<<mid<<"\n";
        if(ispossible(mid, A, C))
        {   
            end = mid - 1;
            ans = mid;
        }
        else
            start = mid + 1;
    }
    return (ans*B)%10000003;
}
